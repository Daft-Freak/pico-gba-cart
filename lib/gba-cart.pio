.define PUBLIC CS_PIN 26
.define PUBLIC RD_PIN 25
.define PUBLIC WR_PIN 24
.define PUBLIC ADDR_BITS 23 ; all 24 on PGA board

.program gba_rom_cs

; reads address when ROM CS goes low
; assumes CS = GPIO 26
; Y should be preloaded with high bits of address
.wrap_target
    wait 0 pin CS_PIN

    in pins, ADDR_BITS ; latch address
    wait 0 irq 0 ; wait for last transfer to abort
    in null, 1 ; x2 PIO style

    wait 1 pin CS_PIN
    irq set 0
    in y, (32 - (ADDR_BITS + 1)) ; prepare high bits for next addr
.wrap

; switches pins to output and writes data when RD goes low
.program gba_rom_rd
.wrap_target
    wait 0 pin CS_PIN ; wait for CS
    wait 0 pin RD_PIN ; wait for RD

    ; data
    pull
    out pins, 16

    ; set output
    mov pindirs, ~null 

    wait 1 pin RD_PIN [5] ; give the GBA time to read

    ; set input
    mov pindirs, null 
.wrap

; reads when WR goes low
.program gba_rom_wr
.wrap_target
    wait 0 pin CS_PIN ; wait for CS
    wait 0 pin WR_PIN ; wait for WR

    in pins, 16

    wait 1 pin WR_PIN
.wrap